

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."url" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "long_url" character varying DEFAULT ''::character varying NOT NULL,
    "short_url" character varying NOT NULL,
    "user_id" "uuid" NOT NULL
);


ALTER TABLE "public"."url" OWNER TO "postgres";


COMMENT ON TABLE "public"."url" IS 'stores long_urls and short_urls';



COMMENT ON COLUMN "public"."url"."user_id" IS 'user id foreign key that points to auth.users (id)';



ALTER TABLE "public"."url" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."url_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."url_metric" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "visits" integer DEFAULT 0 NOT NULL,
    "datetime" timestamp with time zone NOT NULL,
    "url_id" bigint NOT NULL,
    "unique_visitors" integer DEFAULT 0 NOT NULL
);


ALTER TABLE "public"."url_metric" OWNER TO "postgres";


COMMENT ON TABLE "public"."url_metric" IS 'url metrics tied to url row instances';



ALTER TABLE "public"."url_metric" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."url_metric_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."url_metric"
    ADD CONSTRAINT "url_metric_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."url"
    ADD CONSTRAINT "url_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."url"
    ADD CONSTRAINT "url_short_url_key" UNIQUE ("short_url");



ALTER TABLE ONLY "public"."url_metric"
    ADD CONSTRAINT "url_metric_url_id_fkey" FOREIGN KEY ("url_id") REFERENCES "public"."url"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."url"
    ADD CONSTRAINT "url_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Allow updates by public" ON "public"."url" FOR UPDATE USING (true);



CREATE POLICY "Enable delete for users based on user_id" ON "public"."url" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."url" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."url_metric" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."url" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."url_metric" FOR SELECT USING (true);



CREATE POLICY "Enable update for authenticated users only" ON "public"."url_metric" FOR UPDATE TO "authenticated" USING (true);



ALTER TABLE "public"."url" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."url_metric" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";








































































































































































GRANT ALL ON TABLE "public"."url" TO "anon";
GRANT ALL ON TABLE "public"."url" TO "authenticated";
GRANT ALL ON TABLE "public"."url" TO "service_role";



GRANT ALL ON SEQUENCE "public"."url_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."url_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."url_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."url_metric" TO "anon";
GRANT ALL ON TABLE "public"."url_metric" TO "authenticated";
GRANT ALL ON TABLE "public"."url_metric" TO "service_role";



GRANT ALL ON SEQUENCE "public"."url_metric_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."url_metric_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."url_metric_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
